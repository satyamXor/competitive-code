#include <iostream>
using namespace std;
int seive[1000001]; 

void createSieve() {
    int N = 1000000;
    for(int i = 2;i<=N;i++) sieve[i] = 1; 
    
    for(int i = 2;i*i<=N;i++) {
        
        // if its a prime, then mark all its multiples as 0
        if(sieve[i] == 1) {
            for(int j = i*i;j<=N;j+=i) {
                sieve[j] = 0; 
            }
        }
    }
}
void primeCheck() {
    
    int t;
    cin >> t;
    createSieve(); 
    while(t--) {
        int n;
        cin >> n; 
        if(sieve[n] == 1) cout << "yes\n"; 
        else cout << "No\n"; 
    }
}
int spf[1000001]; 

void createModifiedSieve() {
    int N = 1000000;
    for(int i = 0;i<=N;i++) spf[i] = i; 
    
    for(int i = 2;i*i<=N;i++) {
        
        // if its a prime, then mark all its multiples as 0
        if(spf[i] == i) {
            for(int j = i*i;j<=N;j+=i) {
                if(spf[j] == j)
                    spf[j] = i; 
            }
        }
    }
}

void printPrimeFactors(int n) {
    while(n != 1) {
        cout << spf[n] << " "; 
        n = n / spf[n]; 
    }
    cout << endl; 
}

void solve() {
    int t;
    cin >> t; 
    createModifiedSieve(); 
    while(t--) {
        int n;
        cin >> n;
        printPrimeFactors(n); 
    }
}

int spf[1000001]; 
int freq[1000001]; 

void createModifiedSieve() {
    int N = 1000000;
    for(int i = 0;i<=N;i++) spf[i] = i; 
    
    for(int i = 2;i*i<=N;i++) {
        
        // if its a prime, then mark all its multiples as 0
        if(spf[i] == i) {
            freq[i]++; 
            for(int j = i*i;j<=N;j+=i) {
                if(spf[j] == j)
                {
                    spf[j] = i; 
                    freq[i]++; 
                }
            }
        }
    }
}



void AshuAndPrimeFactors() {
    int t;
    cin >> t; 
    createModifiedSieve(); 
    while(t--) {
        int n;
        cin >> n;
        cout << freq[n] << endl; 
    }
}




int power(int base, int n, int mod) {
    int ans = 1;
    
    while(n) {
        if(n%2) {
            ans = (ans * base)%mod; 
            n = n - 1; 
        }
        else {
            base = (base* base) % mod; 
            n = n / 2; 
        }
    }
    
    return ans; 
}

int main() {
	
	return 0;
}
