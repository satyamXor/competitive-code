#include <bits/stdc++.h>
#define int long long
using namespace std;
int prehash31[1000000];
int prehash53[1000000];
int mod=1e9+7;
int power31[1000000];
int power53[1000000];
string good;
int k;
 
int power(int base, int n, int m) {
    int ans = 1;
    
    while(n) {
        if(n%2) {
            ans = (ans * base)%mod; 
            n = n - 1; 
        }
        else {
            base = (base* base) % mod; 
            n = n / 2; 
        }
    }
    
    return ans; 
}
void rollingHash(string s){
    int n=s.size();
    int p=1;
    int q=1;
    int hash1=0;
    int hash2=0;
    for(int i=0; i<n;i++){
            hash1=(hash1 + ((s[i]-'a'+1)  *  p  )%mod ) %mod;
            hash2=(hash2 + ((s[i]-'a'+1)  *  q  )%mod ) %mod;
            prehash31[i]=hash1;
            prehash53[i]=hash2;
            power31[i]=power(p,mod-2,mod);
            power53[i]=power(q,mod-2,mod);
            p=(p*31)%mod;
            q=(q*53)%mod;
    }
}
void distinctString(string s,int k){
 
    
     int n=s.size();
     set<pair<int,int>> st;
    for(int i=0;i<n;i++){
          int na=0;
        for(int j=i;j<n;j++){
            int hash1=0;
            int hash2=0;
            if(good[s[j]-'a']=='0') na++;
            if(na>k)
            break;
            if(i-1>=0){
            hash1=(((prehash31[j]-prehash31[i-1]+mod)%mod) * power31[i]) % mod;
            hash2=(((prehash53[j]-prehash53[i-1]+mod)%mod) * power53[i]) % mod;
            }
            else{
                  hash1=prehash31[j];
                  hash2=prehash53[j];
            }
          
    st.insert({hash1,hash2});
        }
    }
    cout<<st.size()<<endl;
}
 
 
signed main() {
 
 string s;
 cin>>s;
 rollingHash(s);
 cin>>good;
 cin>>k;
 distinctString(s,k);

	return 0;
}
