#include <bits/stdc++.h>
#define int long long
using namespace std;

int mod=1e9+7;
int power31[1000000];

//precomputed power of 31
void powerOf31(){
    
    power31[0]=1;
    for(int i=1;i<100;i++){
        
        power31[i]=(power31[i-1]*31)%mod;
    }
}
    


//function to calculate the hash of pattern string
int rollingHash(string s){
    int n=s.size();
    int p=1;
    int hash1=0;
    for(int i=0; i<n;i++){
            hash1=(hash1 + ((s[i]-'a'+1)  *  p  )%mod ) %mod;
            p=(p*31)%mod;
    }
    return hash1;
}

//rabin karp function
void rabinkarp(string s,string pat){
    
    int n=s.size();
    int m=pat.size();
    int patHash=rollingHash(pat);
    int left=0;
    int right=m-1;
    int hash=rollingHash(s.substr(left,m) );
    powerOf31();
    if(patHash==hash)
        cout<<0<<" ";
    while(right<=n-2){
        
        hash=(hash-(power31[left]*(s[left]-'a'+1))%mod +mod)%mod;
        left++;
        right++;
        hash=(hash+ (power31[right]*(s[right]-'a'+1))%mod)%mod;
        
        patHash=(patHash*31)%mod;
        if(patHash==hash)
            cout<<left<<" ";
    }
    cout<<endl;
}
 
 
 signed main() {
 
string s;
cin>>s;
string pat;
cin>>pat;

rabinkarp(s,pat);

	return 0;
}
